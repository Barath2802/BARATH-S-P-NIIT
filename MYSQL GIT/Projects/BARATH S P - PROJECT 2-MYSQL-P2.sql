USE `modelcarsdb`;
-- TASK 1:-
-- TASK 1(1):-
select * from employees;
select count(employeeNumber) from employees;
-- INTERPRETATION
/*In this Task we need to find the count of employees
For that we need to find the count function to show the count of employees. */
-- Task 1(2):-
select * from employees;
select employeeNumber,firstName,lastName,email,jobtitle from employees;
-- INTERPRETATION
/*In this Task we need to find the basic information of employees.
For that I used employeeNumber,firstName,LastName,email,Jobtitle from the employee Table */
-- Task 1(3):-
select count(employeeNumber),jobtitle 
from employees AS E
group by jobtitle
order by count(employeeNumber) desc;
-- INTERPRETATION
/*In this Task we need to find the count of employees holding each job title
For that i have used count function to count the employees along with employee holding with job title.   */
-- Task:1(4):-
select * from employees;
select employeeNumber,firstName,LastName
from employees 
where reportsto is null;
-- INTERPRETATION
/*In this Task we need to find the employees who don't have the manager (reportsto is  null)
For this i used employeetable and apply the condition in where clause where reportsto is null */
-- Task 1(5):-
select * from orderdetails;
select * from employees;
select * from orders;
select * from offices;
select * from products;
select * from productlines;
select sum(quantityOrdered*priceEach),E.employeeNumber,concat(E.firstName," ",E.lastName) as employee_full_name
from orderdetails AS OD
INNER JOIN orders AS O
INNER JOIN customers AS C
INNER JOIN employees AS E
ON OD.orderNumber=O.orderNumber and
O.customerNumber=C.customerNumber and
C.salesRepEmployeeNumber=E.employeeNumber
group by E.employeeNumber,employee_full_name
order by sum(quantityOrdered*priceEach) desc;
-- INTERPRETATION
/*In This Task we need to find the  total sales generated by each sales representative for that i have used a formua for total sales=orderedQuantity*priceEach  
and i used inner join to join the tables of customer table ,orderdetails table,order table and  employee table to get the output..   */
-- Task 1(6):-
select C.salesREPemployeeNumber,sum(OD.quantityordered*OD.priceEach) 
from orderdetails AS OD
INNER JOIN orders AS O
INNER JOIN customers AS C
ON OD.orderNumber=O.orderNumber
AND O.customerNumber=C.customerNumber
group by C.salesRepEmployeeNumber
order by sum(OD.quantityOrdered*OD.priceEach) desc limit 1; 
-- INTERPRETATION
/*The query calculates the total sales generated by each sales representative by summing the total sales of all orders associated with that representative. 
The results are then ordered to identify the sales representative with the highest total sales.This information can be valuable 
for evaluating sales performance, identifying top-performing sales representatives, and providing incentives or recognition.   */
-- Task 1(7):-
select concat(E.firstName," ",E.lastName) as Employee_full_name ,sum(quantityordered*priceEach) as Total_sales,avg(quantityordered*PriceEach) as avg_sales,E.officeCode
from  employees AS E
INNER JOIN customers AS C
INNER JOIN orders AS O
INNER JOIN orderdetails AS OD
ON E.employeeNumber=C.salesRepEmployeeNumber 
AND C.customerNumber=O.customerNumber 
AND O.orderNumber=OD.orderNumber 
group by Employee_full_name,E.officeCode
having Total_sales > avg_sales
order by avg_sales,total_sales desc;
-- INTERPRETATION
/*The query calculates the total sales and average sales generated by each sales representative and then identifies the sales representatives 
whose total sales exceed their average sales. This information can be valuable for evaluating sales performance, 
identifying top-performing sales representatives, and providing incentives or recognition.  */
-- Task 2:-
-- Task 2(1):-
select * from customers;
select C.customerNumber,C.customerName,avg(OD.quantityordered*OD.priceEach) 
from customers AS C
INNER JOIN orders AS O
INNER JOIN orderdetails AS OD
ON C.customerNumber=O.customerNumber 
AND O.orderNumber=OD.orderNumber 
group by C.customerNumber,C.customerName
order by avg(OD.quantityordered*OD.priceEach) desc;
-- INTERPRETATION
/*The query calculates the average order revenue for each customer by multiplying the quantity ordered and price each for each order 
item and then averaging these values across all orders for that customer. The results are then ordered to identify the customers with the highest average order revenue.  */
-- Task 2(2):-
select * from orders;
select * from orderdetails;
select month(orderDate),count(orderNumber)
from orders
group by month(orderdate);
-- INTERPRETATION
/*The query counts the number of orders placed in each month of the year. This helps you understand the distribution of orders throughout the year 
and identify any seasonal trends or patterns. You can use the results to gain insights into peak sales periods, plan inventory levels, 
and allocate resources accordingly.*/
-- Task 2(3):-
select * from orders;
select orderNumber,status from orders where status="inÂ process";
-- INTERPRETATION 
/*The query counts the number of orders that are currently in progress. This information can be helpful for understanding the 
workload of your order processing department, identifying potential bottlenecks, and monitoring the overall efficiency of your operations.   */
-- Task 2(4):-
select O.orderNumber,C.customerName,C.customerNumber,O.orderDate,O.status,O.comments
from orderdetails AS OD
INNER JOIN orders AS O
INNER JOIN customers AS C
ON OD.orderNumber=O.orderNumber 
AND O.customerNumber=C.customerNumber 
group by O.orderNumber,C.customerNumber,C.customerName,O.orderDate,O.status,O.comments;
-- INTERPRERTATION
/*The query retrieves a comprehensive view of order information, including customer details and order status. This can be useful for various purposes,
 such as analyzing customer behavior, tracking order progress, identifying potential issues, and providing customer support.
 The results can be used to gain insights into sales trends, customer preferences, and the overall performance of your business.*/
-- Task 2(5):-
select * from orders;
select max(orderDate),orderNumber,customerNumber
from orders
group by orderNumber,CustomerNumber
order by max(orderDate) desc;
-- INTERPRETATION
/*The query retrieves the order number and customer number for the most recent order placed by each customer. This information can be valuable
 for various purposes, such as tracking customer activity, analyzing customer loyalty, and identifying potential sales opportunities.  */
-- Task 2(6):-
select * from orders;
select *from orderdetails;
	select sum(OD.quantityordered*OD.priceEach) as total_sales,OD.orderNumber
	from orderdetails as OD
	group by OD.orderNumber
	order by total_sales desc;
-- INTERPRETATION
/*The query calculates the total sales for each order by multiplying the quantity ordered and price each 
for each order item and then summing these values across all items in that order. The results are then ordered to identify the orders with the highest total sales.   */
-- Task 2(7):-
select sum(OD.quantityordered*OD.priceEach) as total_sales ,OD.orderNumber
from orderdetails AS OD
GROUP BY OD.orderNumber
order by total_sales desc limit 1;
-- INTERPREATION
/*The query calculates the total sales for each order in the orderdetails table and then selects the order with the highest total sales. 
This information can be valuable for identifying the most profitable order and understanding customer purchasing behavior.  */
-- Task 2(8):-
select * from orders;
select * from orderdetails;
select * from orders natural join orderdetails;
-- INTERPRETATION
/*The query combines the data from the two tables into a single result set. This means that each row in the resulting table will contain information 
from both the orders and orderdetails tables, connected by the orderNumber. This allows you to see the details of each order, 
such as the order number, customer information, order date, status, and product information, all in a single view.  */
-- Task 2(9):-
select * from orderdetails;
select * from products;
select count(OD.orderNumber),P.productName 
from orderdetails AS OD
INNER JOIN products AS P
ON OD.productCode=P.productCode
group by P.productName
order by count(OD.orderNumber) desc;
-- INTERPRETATION
/*The query counts the number of times each product has been ordered in the orderdetails table. This information can be valuable 
for understanding which products are most popular with customers and for making informed decisions about inventory management, product promotion, 
and product development.*/
-- Task 2(10):-
select sum(OD.quantityordered*OD.priceEach) AS TOTAL_REVENUE,OD.orderNumber
from orderdetails AS OD
group by OD.orderNumber
order by TOTAL_REVENUE DESC;
-- INTERPRETATION
/*In this Task we need to find the total revenue for each order
For this case i have used orderdetails date to calculate total_revenue and i have applied 
group by function to display the orderNumber along with the total revenue  */
-- Task 2(11):-
select sum(OD.quantityordered*OD.priceEach) AS TOTAL_REVENUE,OD.orderNumber
from orderdetails AS OD
group by OD.orderNumber
order by TOTAL_REVENUE DESC limit 5;
-- INTERPRETATION
/*In this task we need to find the most profitable orders based on total revenue
for this  case i have used a formula for calculation total_revenue and i applied order by function to display the most profitable orders  */
-- Task 2(12):-
select * from orders natural join products;
-- INTERPRETATION
/* For this task i have used natural joint to combine the tables of orders table and products table*/
-- Task 2(13):-
select * from orderdetails;
select * from orders;
select orderNumber from orders 
where shippedDate>requiredDate;
-- INTERPRETATION
/*In This Task we need to find the orders with delayed shipping
for this case i have used a where clause to find the delayed shipping through shippeddate>requiredDate*/
-- Task 2(14):-
select od1.productcode as p1,od2.productcode as p2
FROM orderdetails AS od1
JOIN orderdetails AS od2 ON od1.orderNumber = od2.orderNumber 
where od1.productCode < od2.productCode;
-- INTERPRETATION
/* For this case i have used a orderdetails table alone and i have compared the productcode for orderdetails 2 is less than orderdetails 1 */
-- Task 2(15):-
select sum(OD.quantityordered*OD.priceEach) AS TOTAL_REVENUE,OD.orderNumber
from orderdetails AS OD
group by OD.orderNumber
order by TOTAL_REVENUE DESC limit 10;
-- INTERPRETATION 
/*In this task we need to find the revenue for each product and identify the top 10 most profitable
For this we need to total revenue for that i have used a formula as sum(quantityordered*priceEach) and i have used order by function 
to display the top 10 of the total revenue  */
-- Task 2(16):-
DELIMITER //
CREATE TRIGGER upcustomer
AFTER INSERT ON orders 
FOR EACH ROW
BEGIN
INSERT INTO orders (orderNumber, orderDate, requiredDate, shippedDate, status, comments, customerNumber)
VALUES (10001, '2023-10-01', '2023-10-07', '2023-10-05', 'Shipped', 'Test order', 103);
UPDATE customers set creditlimit=creditlimit - sum(new.quantityordered*new.priceeach)
where customernumber=new.customernumber;
END //
INSERT INTO orderdetails (orderNumber, productCode, quantityOrdered, priceEach, orderLineNumber)
VALUES (10001, 'S18_1749', 5, 19.99, 1);
select customernumber,creditlimit from customers;
-- INTERPRETATION
/*For this case after inserting a value the changes of creditLimit is shows NULL   */
-- Task 2(17):-
DELIMITER //
CREATE TRIGGER log_product
AFTER INSERT ON orderdetails 
FOR EACH ROW
BEGIN
UPDATE products set quantityinstock= quantityinstock-new.quantityordered where productcode =new.productcode;
end //
INSERT INTO orders (orderNumber, orderDate, requiredDate, shippedDate, status, comments, customerNumber)
VALUES (10, '2024-09-29', '2024-10-08','2024-10-06', 'inprogress', 'Test order1', 103);
INSERT INTO orderdetails (orderNumber, productCode, quantityOrdered, priceEach, orderLineNumber)
VALUES (10, 'S10_4962', 91, 20.00, 1);
-- INTERPRETATION
/*Before the insert operation, the quantity in stock for product s10_4962 was 6791. After the trigger is executed and the quantityOrdered value 
of 91 is inserted into the orderdetails table, the updated quantityInStock is now 6700.*/




 
 
 




